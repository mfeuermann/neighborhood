// Generated by CoffeeScript 1.6.2
(function() {
  var EventEmitter, Lighthouse, Neighbor, Neighborhood, RemoteObjects, Server, colors, net,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  net = require('net');

  colors = require('colors');

  EventEmitter = require('events').EventEmitter;

  Lighthouse = require('./lighthouse').Lighthouse;

  Server = require('./server').Server;

  Neighbor = require('./neighbor').Neighbor;

  RemoteObjects = require('./neighbor').RemoteObjects;

  Neighborhood = (function(_super) {
    __extends(Neighborhood, _super);

    Neighborhood.prototype.lighthouse = null;

    Neighborhood.prototype.server = null;

    Neighborhood.prototype.client = null;

    function Neighborhood(config) {
      var _this = this;

      this.name = config.name;
      this.district = config.district;
      this.lighthouse = new Lighthouse({
        port: config.port,
        district: config.district,
        name: config.name,
        controller: config.controller
      });
      this.lighthouse.on('info', function(msg) {
        return _this.log(msg, 'lhs');
      });
      if (config.controller) {
        this.server = new Server(this, {
          port: config.port
        });
        this.server.on('connect', function(neighbor) {
          neighbor.on('error', function(err) {
            return _this.emit('error', err);
          });
          neighbor.on('info', function(msg) {
            return _this.log(msg);
          });
          return neighbor.on('authorize', function() {
            return _this.emit('connect', neighbor);
          });
        });
        this.server.on('disconnect', function(neighbor) {
          return _this.emit('disconnect');
        });
        this.server.on('close', function() {
          return _this.emit('offline', neighbor);
        });
        this.server.on('error', function(err) {
          return _this.emit('error', err);
        });
        this.server.on('info', function(msg) {
          return _this.log(msg, 'srv');
        });
        this.server.on('listen', function() {
          return _this.emit('online');
        });
      } else {
        this.lighthouse.on('light', function(server) {
          _this.lighthouse.stop();
          _this.client = new Neighbor(_this);
          _this.client.connect(server.host, server.port);
          _this.client.on('authorize', function() {
            return _this.emit('online');
          });
          _this.client.on('close', function(wasConnected) {
            if (wasConnected) {
              _this.emit('offline');
            }
            return _this.lighthouse.start();
          });
          _this.client.on('error', function(err) {
            return _this.emit('error', err);
          });
          return _this.client.on('info', function(msg) {
            return _this.log(msg, 'cli');
          });
        });
      }
    }

    Neighborhood.prototype.log = function(msg, category) {
      return this.emit('info', msg);
    };

    return Neighborhood;

  })(EventEmitter);

  Object.defineProperty(Neighborhood.prototype, 'neighbors', {
    get: function() {
      if (this.server) {
        return this.server.clients;
      }
      if (this.client) {
        return [this.client];
      }
      return [];
    }
  });

  exports.Neighborhood = Neighborhood;

  exports.RemoteObjects = RemoteObjects;

}).call(this);
