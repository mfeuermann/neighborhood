// Generated by CoffeeScript 1.6.2
(function() {
  var EventEmitter, Neighbor, Server, net,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  net = require('net');

  EventEmitter = require('events').EventEmitter;

  Neighbor = require('./neighbor').Neighbor;

  Server = (function(_super) {
    __extends(Server, _super);

    Server.prototype.net = null;

    Server.prototype.listening = false;

    Server.prototype.clients = null;

    function Server(neighborhood, config, callback) {
      var _this = this;

      this.net = net.createServer();
      this.net.listen(config.port);
      this.clients = [];
      if (callback) {
        this.on('listen', callback);
      }
      this.net.on('connection', function(socket) {
        var neighbor;

        neighbor = new Neighbor(neighborhood, socket);
        _this.emit('info', ("neighbor connected from " + neighbor.socket.remoteAddress).grey);
        _this.clients.push(neighbor);
        _this.emit('connect', neighbor);
        return neighbor.on('close', function() {
          neighbor.removeAllListeners();
          _this.emit('info', 'neighbor disconnected'.grey);
          _this.clients.splice(_this.clients.indexOf(neighbor), 1);
          return _this.emit('disconnect', neighbor);
        });
      });
      this.net.on('listening', function() {
        _this.listening = true;
        _this.emit('info', ("listening on " + (_this.net.address().address) + ":" + config.port).grey);
        return _this.emit('listen');
      });
      this.net.on('error', function(err) {
        return _this.emit('error', err);
      });
      this.net.on('close', function() {
        _this.net = null;
        if (!_this.listening) {
          return _this.emit('listen', new Error("Failed to start server."));
        } else {
          _this.listening = false;
          return _this.emit('close');
        }
      });
    }

    Server.prototype.destroy = function() {
      return this.removeAllListeners();
    };

    return Server;

  })(EventEmitter);

  exports.Server = Server;

}).call(this);
