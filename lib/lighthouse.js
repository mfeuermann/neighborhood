// Generated by CoffeeScript 1.6.2
(function() {
  var BROADCAST_INTERVAL, EventEmitter, Lighthouse, dgram, utils,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  dgram = require('dgram');

  utils = require('./utils');

  EventEmitter = require('events').EventEmitter;

  BROADCAST_INTERVAL = 500;

  Lighthouse = (function(_super) {
    __extends(Lighthouse, _super);

    Lighthouse.prototype.server = null;

    Lighthouse.prototype.client = null;

    Lighthouse.prototype.config = null;

    Lighthouse.prototype.running = false;

    Lighthouse.prototype._timer = null;

    function Lighthouse(config) {
      this.config = config;
      this.id = utils.guid();
      this.start();
    }

    Lighthouse.prototype.start = function() {
      var _this = this;

      if (this.running) {
        return;
      }
      this.running = true;
      if (this.config.controller) {
        this.server = dgram.createSocket('udp4');
        return this.server.bind(function() {
          var _ref;

          _this.server.setBroadcast(true);
          _this._timer = setInterval(function() {
            var packet;

            if (!_this.running) {
              return;
            }
            packet = {
              id: _this.id,
              port: _this.config.port,
              district: _this.config.district,
              name: _this.config.name,
              controller: _this.config.controller
            };
            packet = new Buffer(JSON.stringify(packet));
            return _this.server.send(packet, 0, packet.length, 22333, '255.255.255.255', function(err, bytes) {});
          }, (_ref = _this.config.interval) != null ? _ref : BROADCAST_INTERVAL);
          return _this.emit('info', "lighthouse lights out on 255.255.255.255:22333".grey);
        });
      } else {
        this.client = dgram.createSocket('udp4');
        this.client.on("message", function(msg, rinfo) {
          var ex, found;

          if (!_this.running) {
            return;
          }
          try {
            msg = JSON.parse(msg);
          } catch (_error) {
            ex = _error;
            msg = null;
          }
          if (msg && msg.district === _this.config.district && msg.id !== _this.id) {
            found = {
              name: msg.name,
              port: msg.port,
              host: rinfo.address
            };
            _this.emit('info', ("controller found: " + found.name + " (" + found.host + ":" + found.port + ")").grey);
            return _this.emit('light', found);
          }
        });
        return this.client.bind(22333, function() {
          return _this.emit('info', ("lighthouse listen on " + (_this.client.address().address) + ":" + (_this.client.address().port)).grey);
        });
      }
    };

    Lighthouse.prototype.stop = function() {
      if (!this.running) {
        return;
      }
      this.running = false;
      if (this._timer) {
        clearInterval(this._timer);
        this._timer = null;
      }
      if (this.config.controller) {
        this.server.close();
        return this.server = null;
      } else {
        this.client.close();
        return this.client = null;
      }
    };

    return Lighthouse;

  })(EventEmitter);

  exports.Lighthouse = Lighthouse;

}).call(this);
