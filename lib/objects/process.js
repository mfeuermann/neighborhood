// Generated by CoffeeScript 1.6.2
(function() {
  var LocalObject, LocalProcess, RemoteObject, RemoteProcess, child, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  child = require('child_process');

  RemoteObject = require('../remoteobject').RemoteObject;

  LocalObject = require('../localobject').LocalObject;

  RemoteProcess = (function(_super) {
    __extends(RemoteProcess, _super);

    function RemoteProcess() {
      _ref = RemoteProcess.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    RemoteProcess.prototype.fork = function() {
      return this.call.apply(this, ['fork'].concat(__slice.call(arguments)));
    };

    RemoteProcess.prototype.kill = function() {
      return this.call.apply(this, ['kill'].concat(__slice.call(arguments)));
    };

    RemoteProcess.prototype.send = function() {
      return this.call.apply(this, ['send'].concat(__slice.call(arguments)));
    };

    RemoteProcess.prototype.isConnected = function(callback) {
      return this.call('isConnected', callback);
    };

    return RemoteProcess;

  })(RemoteObject);

  LocalProcess = (function(_super) {
    __extends(LocalProcess, _super);

    function LocalProcess() {
      _ref1 = LocalProcess.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    LocalProcess.prototype.process = null;

    LocalProcess.prototype.running = false;

    LocalProcess.prototype._timeout = null;

    LocalProcess.prototype.fork = function(modulePath, args, options) {
      var _this = this;

      if (this.process) {
        this.kill();
      }
      if (!modulePath) {
        this.emit('error', new Error("Module to run in process must be specified!"));
      }
      this.process = child.fork(modulePath, args, options);
      this.process.on('error', function() {
        return _this.emit.apply(_this, ['error'].concat(__slice.call(arguments)));
      });
      this.process.on('disconnect', function() {
        if (!_this.running) {
          return;
        }
        return _this.emit.apply(_this, ['disconnect'].concat(__slice.call(arguments)));
      });
      this.process.on('exit', function() {
        if (!_this.running) {
          return;
        }
        return _this.emit.apply(_this, ['exit'].concat(__slice.call(arguments)));
      });
      this.process.on('close', function() {
        if (!_this.running) {
          return;
        }
        _this.running = false;
        _this.emit.apply(_this, ['close'].concat(__slice.call(arguments)));
        _this.process.removeAllListeners();
        return _this.process = null;
      });
      this.process.on('message', function(message) {
        if ((message != null ? message.__process_online__ : void 0) === true) {
          clearTimeout(_this._timeout);
          _this.running = true;
          return _this.emit('online');
        } else {
          return _this.emit.apply(_this, ['message'].concat(__slice.call(arguments)));
        }
      });
      return this._timeout = setTimeout(function() {
        if (_this.running) {
          return;
        }
        _this.emit('error', new Error("Process fork timeouted!"));
        return _this.kill();
      }, 30000);
    };

    LocalProcess.prototype.kill = function(signal) {
      if (this.process) {
        return this.process.kill(signal);
      }
    };

    LocalProcess.prototype.send = function(message) {
      if (this.process) {
        return this.process.send(message);
      } else {
        return this.emit('error', new Error("Process is not running!"));
      }
    };

    LocalProcess.prototype.isConnected = function(callback) {
      return callback(null, this.process.connected);
    };

    LocalProcess.prototype.destroy = function() {
      this.kill();
      return LocalProcess.__super__.destroy.call(this);
    };

    return LocalProcess;

  })(LocalObject);

  exports.RemoteProcess = RemoteProcess;

  exports.LocalProcess = LocalProcess;

}).call(this);
